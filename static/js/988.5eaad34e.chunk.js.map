{"version":3,"file":"static/js/988.5eaad34e.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","redux/contacts/contactsSliceSelectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formLabelText\":\"ContactForm_formLabelText__N5qA+\",\"formInput\":\"ContactForm_formInput__GszVU\",\"button\":\"ContactForm_button__eSwX9\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectContactsIsLoading = state => state.contacts.isLoading;\n\nexport const selectContactsError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact => {\n      const contactName = contact.name || '';\n      return contactName.toLowerCase().includes(filter.trim().toLowerCase());\n    });\n  }\n);\n","import css from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\n\nimport { useState } from 'react';\n\nimport { apiAddContact } from 'components/services/api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/contactsSliceSelectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const name = event.currentTarget.elements.name.value;\n    const number = event.currentTarget.elements.number.value;\n\n    const formData = {\n      name,\n      number,\n    };\n\n    const hasDuplicates = contacts.some(contact => {\n      const contactName = contact.name || '';\n      return contactName.toLowerCase() === formData.name.toLowerCase();\n    });\n\n    if (hasDuplicates) {\n      alert(`${formData.name} is already in contacts`);\n      return;\n    }\n\n    const newFriend = { ...formData, id: nanoid().toString() };\n\n    const action = apiAddContact(newFriend);\n    console.log(newFriend);\n    dispatch(action);\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className={css.formLabel}>\n        Name:\n        <input\n          className={css.formInput}\n          id=\"inputName\"\n          name=\"name\"\n          type=\"text\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <label className={css.formLabel}>\n        Number:\n        <input\n          className={css.formInput}\n          id=\"inputNumber\"\n          name=\"number\"\n          type=\"tel\"\n          value={number}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <button className={css.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"profileItem\":\"ContactList_profileItem__GRloT\",\"buttonProfile\":\"ContactList_buttonProfile__8X7hZ\"};","import css from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { apiRemoveContacts } from 'components/services/api';\nimport { selectFilteredContacts } from './../../redux/contacts/contactsSliceSelectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const handleDeleteProfile = id => {\n    const action = apiRemoveContacts(id);\n    dispatch(action);\n  };\n\n  return (\n    <ul className={css.list}>\n      {filteredContacts.map(contact => {\n        return (\n          <li key={contact.id} className={css.profileItem}>\n            {contact.name}: {contact.number}\n            <button\n              className={css.buttonProfile}\n              onClick={() => handleDeleteProfile(contact.id)}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport { ContactList };\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInput\":\"Filter_filterInput__1Cysk\"};","import css from './Filter.module.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { setFilter } from '../../redux/contacts/contactsSlice';\n\nimport { selectFilter } from '../../redux/contacts/contactsSliceSelectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleChangeFilter = event => {\n    const value = event.target.value;\n    const action = setFilter(value);\n    dispatch(action);\n  };\n\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input\n        className={css.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChangeFilter}\n      />\n    </div>\n  );\n};\n\nexport { Filter };\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport { apiGetContacts } from 'components/services/api';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContactsError,\n  selectContactsIsLoading,\n} from './../redux/contacts/contactsSliceSelectors';\nimport { Filter } from 'components/Filter/Filter';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n\n  useEffect(() => {\n    dispatch(apiGetContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      ContactsPage\n      {isLoading && !error && <Loader />}\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectContacts","state","contacts","selectFilter","filter","selectContactsIsLoading","isLoading","selectContactsError","error","selectFilteredContacts","createSelector","contact","name","toLowerCase","includes","trim","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","handleChange","event","_event$target","target","value","_jsxs","onSubmit","preventDefault","formData","currentTarget","elements","some","alert","concat","newFriend","_objectSpread","action","apiAddContact","console","log","children","className","css","_jsx","type","onChange","required","ContactList","filteredContacts","map","onClick","apiRemoveContacts","handleDeleteProfile","Filter","setFilter","useEffect","apiGetContacts","Loader"],"sourceRoot":""}